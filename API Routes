const express = require('express');
const { body, validationResult } = require('express-validator');
const Booking = require('../models/Booking');
const nodemailer = require('nodemailer');
const router = express.Router();

// Email transporter
const transporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Create booking
router.post('/', [
  body('name').notEmpty().trim().escape(),
  body('email').isEmail().normalizeEmail(),
  body('preferredDate').isISO8601(),
  body('preferredTime').notEmpty()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const booking = new Booking(req.body);
    await booking.save();

    // Send confirmation email
    await sendConfirmationEmail(booking);

    res.status(201).json({
      success: true,
      message: 'Booking created successfully',
      booking: {
        id: booking._id,
        name: booking.name,
        email: booking.email,
        preferredDate: booking.preferredDate,
        preferredTime: booking.preferredTime
      }
    });
  } catch (error) {
    console.error('Booking creation error:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// Get booking by ID
router.get('/:id', async (req, res) => {
  try {
    const booking = await Booking.findById(req.params.id);
    if (!booking) {
      return res.status(404).json({ success: false, message: 'Booking not found' });
    }
    res.json({ success: true, booking });
  } catch (error) {
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

async function sendConfirmationEmail(booking) {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: booking.email,
    subject: 'Executive AI - Booking Confirmation',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #0077ff;">Executive AI - Booking Confirmed</h2>
        <p>Dear ${booking.name},</p>
        <p>Your AI Upgrade Call has been scheduled for:</p>
        <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <p><strong>Date:</strong> ${new Date(booking.preferredDate).toLocaleDateString()}</p>
          <p><strong>Time:</strong> ${booking.preferredTime}</p>
        </div>
        <p>We will send you a calendar invitation and meeting link shortly.</p>
        <p>Best regards,<br>Executive AI Team</p>
      </div>
    `
  };

  await transporter.sendMail(mailOptions);
}

module.exports = router;
